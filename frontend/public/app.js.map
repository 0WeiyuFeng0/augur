{"version":3,"sources":["app/components/contributions.tag","app/components/githubform.tag","app/components/healthreport.tag","app/components/report.tag","app/ghdata-api-client.js","app/index.js","app/lib/ghdata-api-client.js","app/posts.tag"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlCA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhjLA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnlLA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AAHA;AAAA","file":"public/app.js","sourcesContent":["riot.tag('contributions', '<div class=\"echarts-container\" style=\"width: 100%; height: 400px;\"></div>', function(opts) {\n\n  this.on('mount', () => {\n    var echarts = require('echarts')\n    var chart = echarts.init(this.root.querySelector('.echarts-container'))\n    chart.showLoading()\n\n    this.opts.api.get('contributions', {orient: 'split'}).then((contributions) => {\n\n      var data = [];\n\n      contributions.data.forEach((row) => {\n        for (var i = 1; i < row.length; i++) {\n          if (!row[i]) {\n            row[i] = 0\n          }\n          data.push([row[0], row[i], (i-1)])\n        }\n      })\n\n      console.log(data)\n\n      chart.hideLoading()\n      chart.setOption({\n          series: [{\n              type: 'themeRiver',\n              data: data\n          }]\n      })\n\n    })\n  })\n\n\n});","riot.tag('githubform', '<img src=\"images/logo.svg\" alt=\"OSSHealth\" class=\"logo\"> <input type=\"text\" placeholder=\"GitHub URL\" ref=\"githubURL\"> <button onclick=\"{ submit }\">Analyze</button><br><br>', function(opts) {\n\nthis.submit = function (e) {\n  var splitURL = this.root.querySelectorAll('input')[0].value.split('/')\n  var repo, owner\n  if (splitURL.length > 2) {\n    console.log('big')\n    repo = splitURL[3]\n    owner = splitURL[4]\n  } else if (splitURL.length === 2) {\n    console.log('lil')\n    repo = splitURL[0]\n    owner = splitURL[1]\n  } else {\n    let errorMessage = document.createElement('p')\n    errorMessage.style.color = '#f00'\n    errorMessage.innerHTML = 'Enter a valid URL'\n    this.root.appendChild(errorMessage)\n    return\n  }\n  this.opts.onsubmit(owner, repo)\n}.bind(this);\n\n\n});","riot.tag('healthreport', '<div class=\"container\"> <section> <div class=\"row\"> <div class=\"nine columns\"><h1 id=\"repo-label\">{owner} / {repo}</h1></div> </div> </section> <section> <h2>Contributions</h2> <div class=\"row\"> <div class=\"twelve columns\"><contributions></contributions></div> </div> </section> </div>', function(opts) {\n\n  this.owner = this.opts.owner\n  this.repo = this.opts.repo\n\n  var ghdata = require('../lib/ghdata-api-client')\n  var api = new ghdata.GHDataAPIClient(undefined, this.owner, this.repo)\n  console.log(api)\n  console.log(api.get)\n\n  this.on('mount', function () {\n    require('./contributions.tag');\n    riot.mount('contributions', {api: api})\n  })\n\n\n});","riot.tag('HealthReport', '<section> <div class=\"row\"> <div class=\"nine columns\"><h1 id=\"repo-label\"> facebook / folly </h1></div> <div class=\"three columns\"><div id=\"status\" class=\"badge healthy\">healthy</div></div> </div> </section> <section> <h2>Growth Indicators</h2> <div class=\"row trends\"> <TimeseriesGraph path=\"commits\"></div> <div class=\"four columns\" id=\"commits-over-time\"></div> <div class=\"four columns\" id=\"stargazers-over-time\"></div> <div class=\"four columns\" id=\"forks-over-time\"></div> </div>  <div class=\"row trends\"> <div class=\"four columns\" id=\"issues-over-time\"></div> <div class=\"four columns\" id=\"pulls-over-time\"></div> </div> </section>', function(opts) {\n\n\n});","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.default = GHDataAPIClient;\n/* SPDX-License-Identifier: MIT */\n\n/**\n * Handles interaction with a GHData server.\n * @constructor\n */\nfunction GHDataAPIClient(apiUrl, owner, repo, apiVersion) {\n  this.owner = owner || '';\n  this.repo = repo || '';\n  this.url = apiUrl || 'http://' + document.location.hostname + ':5000/';\n  this.apiversion = apiVersion || 'unstable';\n}\n\n/* Request Handling\n * Create a friendly wrapper around XMLHttpRequest\n--------------------------------------------------------------*/\n\n/**\n * Wraps XMLHttpRequest with many goodies. Credit to SomeKittens on StackOverflow.\n * @param {Object} opts - Stores the url (opts.url), method (opts.method), headers (opts.headers) and query parameters (opt.params). All optional.\n * @returns {Promise} Resolves with XMLHttpResponse.response\n */\nGHDataAPIClient.prototype.request = function (opts) {\n  // Use GHData by default\n  opts.endpoint = opts.endpoint || '';\n  opts.url = opts.url || this.url + this.apiversion + '/' + this.owner + '/' + this.repo + '/' + opts.endpoint;\n  opts.method = opts.method || 'GET';\n  return new Promise(function (resolve, reject) {\n    var xhr = new XMLHttpRequest();\n    xhr.open(opts.method, opts.url);\n    xhr.onload = function () {\n      if (this.status >= 200 && this.status < 300) {\n        resolve(xhr.response);\n      } else {\n        reject({\n          status: this.status,\n          statusText: xhr.statusText\n        });\n      }\n    };\n    xhr.onerror = function () {\n      reject({\n        status: this.status,\n        statusText: xhr.statusText\n      });\n    };\n    if (opts.headers) {\n      Object.keys(opts.headers).forEach(function (key) {\n        xhr.setRequestHeader(key, opts.headers[key]);\n      });\n    }\n    var params = opts.params;\n    // We'll need to stringify if we've been given an object\n    // If we have a string, this is skipped.\n    if (params && (typeof params === 'undefined' ? 'undefined' : _typeof(params)) === 'object') {\n      params = Object.keys(params).map(function (key) {\n        return encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);\n      }).join('&');\n    }\n    xhr.send(params);\n  });\n};\n\n/**\n * Wraps the GET requests with the correct options for most GHData calls\n * @param {String} endpoint - Endpoint to send the request to\n * @param {Object} params - Query string params to pass to the API\n * @returns {Promise} Resolves with Object created from the JSON returned by GHData\n */\nGHDataAPIClient.prototype.get = function (endpoint, params) {\n  var self = this;\n  return new Promise(function (resolve, request) {\n    self.request({\n      method: 'GET',\n      endpoint: endpoint,\n      params: params\n    }).then(function (response) {\n      // Lets make this thing JSON\n      var result = JSON.parse(response);\n      resolve(result);\n    });\n  });\n};\n\n/* Endpoints\n * Wrap all the API endpoints to make it as simple as possible\n--------------------------------------------------------------*/\n\n/**\n * Commits timeseries\n * @param {Object} params - Query string params to pass to the API\n * @returns {Promise} Resolves with commits timeseries object\n */\nGHDataAPIClient.prototype.commitsByWeek = function (params) {\n  return this.get('timeseries/commits', params);\n};\n\n/**\n * Forks timeseries\n * @param {Object} params - Query string params to pass to the API\n * @returns {Promise} Resolves with forks timeeseries object\n */\nGHDataAPIClient.prototype.forksByWeek = function (params) {\n  return this.get('timeseries/forks', params);\n};\n\n/**\n * Stargazers timeseries\n * @param {Object} params - Query string params to pass to the API\n * @returns {Promise} Resolves with commits timeseries object\n */\nGHDataAPIClient.prototype.stargazersByWeek = function (params) {\n  return this.get('timeseries/stargazers', params);\n};\n\n/**\n * Issues timeseries\n * @param {Object} params - Query string params to pass to the API\n * @returns {Promise} Resolves with commits timeseries object\n */\nGHDataAPIClient.prototype.issuesByWeek = function (params) {\n  return this.get('timeseries/issues', params);\n};\n\n/**\n * Pull Requests timeseries\n * @param {Object} params - Query string params to pass to the API\n * @returns {Promise} Resolves with commits timeseries object\n */\nGHDataAPIClient.prototype.pullRequestsByWeek = function (params) {\n  return this.get('timeseries/pulls', params);\n};\n\n/**\n * Pull Requests timeseries\n * @param {Object} params - Query string params to pass to the API\n * @returns {Promise} Resolves with commits timeseries object\n */\nGHDataAPIClient.prototype.contributionsByWeek = function (params) {\n  return this.get('timeseries/contributions', params);\n};\n\n/**\n * How quickly after issues are made they are commented on\n * @param {Object} params - Query string params to pass to the API\n * @returns {Promise} Resolves with commits timeseries object\n */\nGHDataAPIClient.prototype.issuesResponseTime = function (params) {\n  return this.get('timeseries/issues/response_time', params);\n};\n\n/**\n * Contributions timeseries\n * @param {Object} params - Query string params to pass to the API\n * @returns {Promise} Resolves with commits timeseries object\n */\nGHDataAPIClient.prototype.contributors = function (params) {\n  return this.get('timeseries/contributors', params);\n};\n\n/**\n * Locations of the committers\n * @param {Object} params - Query string params to pass to the API\n * @returns {Promise} Resolves with commits timeseries object\n */\nGHDataAPIClient.prototype.committerLocations = function (params) {\n  return this.get('commits/locations', params);\n};\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildForm = buildForm;\nexports.start = start;\nrequire('riot');\n\nfunction buildForm(owner, repo) {\n  require('./components/healthreport');\n  riot.mount('healthreport', { owner: owner, repo: repo });\n}\n\nfunction start() {\n  require('./components/githubform');\n  riot.mount('githubform', { onsubmit: buildForm });\n  //riot.mount('report', {owner: owner, repo: repo});\n}\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.GHDataAPIClient = GHDataAPIClient;\n/* SPDX-License-Identifier: MIT */\n\n/**\n * Handles interaction with a GHData server.\n * @constructor\n */\nfunction GHDataAPIClient(apiUrl, owner, repo, apiVersion) {\n  this.owner = owner || '';\n  this.repo = repo || '';\n  this.url = apiUrl || 'http://' + document.location.hostname + ':5000/';\n  this.apiversion = apiVersion || 'unstable';\n  return this;\n}\n\n/* Request Handling\n * Create a friendly wrapper around XMLHttpRequest\n--------------------------------------------------------------*/\n\n/**\n * Wraps XMLHttpRequest with many goodies. Credit to SomeKittens on StackOverflow.\n * @param {Object} opts - Stores the url (opts.url), method (opts.method), headers (opts.headers) and query parameters (opt.params). All optional.\n * @returns {Promise} Resolves with XMLHttpResponse.response\n */\nGHDataAPIClient.prototype.request = function (opts) {\n  // Use GHData by default\n  opts.endpoint = opts.endpoint || '';\n  opts.url = opts.url || this.url + this.apiversion + '/' + this.owner + '/' + this.repo + '/' + opts.endpoint;\n  opts.method = opts.method || 'GET';\n  return new Promise(function (resolve, reject) {\n    var xhr = new XMLHttpRequest();\n    xhr.open(opts.method, opts.url);\n    xhr.onload = function () {\n      if (this.status >= 200 && this.status < 300) {\n        resolve(xhr.response);\n      } else {\n        reject({\n          status: this.status,\n          statusText: xhr.statusText\n        });\n      }\n    };\n    xhr.onerror = function () {\n      reject({\n        status: this.status,\n        statusText: xhr.statusText\n      });\n    };\n    if (opts.headers) {\n      Object.keys(opts.headers).forEach(function (key) {\n        xhr.setRequestHeader(key, opts.headers[key]);\n      });\n    }\n    var params = opts.params;\n    // We'll need to stringify if we've been given an object\n    // If we have a string, this is skipped.\n    if (params && (typeof params === 'undefined' ? 'undefined' : _typeof(params)) === 'object') {\n      params = Object.keys(params).map(function (key) {\n        return encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);\n      }).join('&');\n    }\n    xhr.send(params);\n  });\n};\n\n/**\n * Wraps the GET requests with the correct options for most GHData calls\n * @param {String} endpoint - Endpoint to send the request to\n * @param {Object} params - Query string params to pass to the API\n * @returns {Promise} Resolves with Object created from the JSON returned by GHData\n */\nGHDataAPIClient.prototype.get = function (endpoint, params) {\n  var self = this;\n  return new Promise(function (resolve, request) {\n    self.request({\n      method: 'GET',\n      endpoint: endpoint,\n      params: params\n    }).then(function (response) {\n      // Lets make this thing JSON\n      var result = JSON.parse(response);\n      resolve(result);\n    });\n  });\n};\n\n/* Endpoints\n * Wrap all the API endpoints to make it as simple as possible\n--------------------------------------------------------------*/\n\n/**\n * Commits timeseries\n * @param {Object} params - Query string params to pass to the API\n * @returns {Promise} Resolves with commits timeseries object\n */\nGHDataAPIClient.prototype.commitsByWeek = function (params) {\n  return this.get('timeseries/commits', params);\n};\n\n/**\n * Forks timeseries\n * @param {Object} params - Query string params to pass to the API\n * @returns {Promise} Resolves with forks timeeseries object\n */\nGHDataAPIClient.prototype.forksByWeek = function (params) {\n  return this.get('timeseries/forks', params);\n};\n\n/**\n * Stargazers timeseries\n * @param {Object} params - Query string params to pass to the API\n * @returns {Promise} Resolves with commits timeseries object\n */\nGHDataAPIClient.prototype.stargazersByWeek = function (params) {\n  return this.get('timeseries/stargazers', params);\n};\n\n/**\n * Issues timeseries\n * @param {Object} params - Query string params to pass to the API\n * @returns {Promise} Resolves with commits timeseries object\n */\nGHDataAPIClient.prototype.issuesByWeek = function (params) {\n  return this.get('timeseries/issues', params);\n};\n\n/**\n * Pull Requests timeseries\n * @param {Object} params - Query string params to pass to the API\n * @returns {Promise} Resolves with commits timeseries object\n */\nGHDataAPIClient.prototype.pullRequestsByWeek = function (params) {\n  return this.get('timeseries/pulls', params);\n};\n\n/**\n * Pull Requests timeseries\n * @param {Object} params - Query string params to pass to the API\n * @returns {Promise} Resolves with commits timeseries object\n */\nGHDataAPIClient.prototype.contributionsByWeek = function (params) {\n  return this.get('timeseries/contributions', params);\n};\n\n/**\n * How quickly after issues are made they are commented on\n * @param {Object} params - Query string params to pass to the API\n * @returns {Promise} Resolves with commits timeseries object\n */\nGHDataAPIClient.prototype.issuesResponseTime = function (params) {\n  return this.get('timeseries/issues/response_time', params);\n};\n\n/**\n * Contributions timeseries\n * @param {Object} params - Query string params to pass to the API\n * @returns {Promise} Resolves with commits timeseries object\n */\nGHDataAPIClient.prototype.contributors = function (params) {\n  return this.get('timeseries/contributors', params);\n};\n\n/**\n * Locations of the committers\n * @param {Object} params - Query string params to pass to the API\n * @returns {Promise} Resolves with commits timeseries object\n */\nGHDataAPIClient.prototype.committerLocations = function (params) {\n  return this.get('commits/locations', params);\n};\n","riot.tag('posts', '<h1>work</h1>', function(opts) {\n  \n});\n"]}